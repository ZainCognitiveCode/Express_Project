npx express-generator
npm install
npm start

// In your browser to access the app.
http://localhost:3000/

// use ORM(Object Relation Method), sequelize

npm install --save sequelize
npm install --save mysql2

npm install --save-dev sequelize-cli
npx sequelize-cli init
npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string
npx sequelize-cli db:migrate


// if you have changed the databasename into config.json file then do it
npx sequelize-cli db:create
// This will create the db into mysql 

// Making Apis of auth

// Applying validation through Express-validator

// Making a middleware as logger.js and using it in the users.js 

// writing password of mysqlWorkbench in config.json file.

// making config/database.js file and then copying data into it.

// exporting database.js as sequelize and using in db/sql.js


I made get,post,delete,put for the routes/user.js 
// I defined the types of the columns in the models/user.js
// I ran command for the updated migration. -> npx sequelize-cli db:migrate


9:30 PM 27/01/2025
I made Validation Folder and Added Validations file for users.js and auth.js in it.

// When I am getting something from my folders then I am using 
const something = require('./something);

// and when I want something from the modules then I do it
const {something} = require('./something);

// Making a gitignore file and adding node_modules

// I made authControllers in the controllers/authControllers.js file
// Then I implemented it in the routes/auth.js


// I changed the columns in my db so I did this.
npx sequelize-cli migration:generate --name update-table-name


I have now a file named as 20250128065430-update-table-name in my migrations folder.

I made changes bcz I have changed my columns to id,username,email,password and etc and remove the previous columns.

// then I ran this command to apply migration
npx sequelize-cli db:migrate


// New module which I Added

npm install bcrypt
npm install bcryptjs
npm install jsonwebtoken
npm install dotenv

// I had a mistake like this 
const {User} = require('../models/user');

// and I corrected it like this
const User = require('../models/user');


// created .env file at the root.
// added JWT_SECRET in it

// adding in app.js -> require('dotenv').config();

// I added .env into .gitignore

// I used jwt for signUp and signIn in auth.js

// I wrote it in the app.js file
console.log("JWT_SECRET:", process.env.JWT_SECRET);

// I did this in .env file
EMAIL_USER=xain.graphics69@gmail.com
EMAIL_PASS=********


// We do not need to use authenticateToken for auth.js bcz these routes are publicly accessible to the user. 
// We will use authenticateToken on users.js routes.

// I have made middleware in the middleware folder as authMiddleware.js
// Then I use it in the app.js as app.use('/users',authenticateToken,usersRouter);

// We can generate jwt_secret like this
node -e "console.log(require('crypto').randomBytes(64).toString('hex'));"

// then I pasted jwt_token generated  into .env file on JWT_SECRET
// And when I signup, it also gives me a token which I will need to verify the user.
// I used the generated token after signup into authorization headers when I want to delete the user,update it, I can do it
now only by providing the token only. I am doing it now with users.js routes. 

// I added again firstName and lastName Columns now in the db again and updated my migration.

Jan 29/2025
// AT 12.42AM

// I installed mongoose.
// I made account on MongoDB and connected it to the mongodb Atlas.

//  "type": "commonjs", in package.json

// I made connection in db/mongo.js file with mongoose.

// Feb 02/2025

//I used Nodemailer for sending mails

// I added Comments and post section in the routes
// I also added pagination to the comments.



Feb 03/2025 
// Updated my code.
// Made db folder and made the connections separate into this folder.
// Improved my Code Readability by making Controller of User,comment,posts and then adding validation on them.


Feb 13/2025
I made usermiddleware to get the user id and then used it in the users.js route.
// By learning from the Udemy Course, I am applying that here too.

// Made a comment in app.js file as 
// for using or serving static files, we do this

// Command for ESLINT and Prettier
npm i eslint prettier eslint-config-prettier eslint-plugin-prettier eslint-config-airbnb eslint-plugin-node eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react --save-dev



// Promise.allSettled -> if all the processes are successfull or failed, it will complete all of them and show the result either fail or successful
// Promise.all -> if any of the proccess gets failed then it will exit and will not move forward.
// Promise.any -> if any of the process is successfull then it will show the result 


Feb 14/2025
I changed the mongodb connection by placing the db string in the env file.
// Made Changes in the error in app.js so that it will look more useful

// I made error custom class in utils/appError
// I made errorController for app.js in controllers folder.